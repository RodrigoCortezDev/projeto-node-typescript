 - Iniciar o projeto criando a pasta do projeto.
 - executar o comando para inicar o "package.json" nessa pasta:
    -> yarn init -y  (Inicia o package sem perguntar)
    -> code .  (abre o VSCode na pasta do projeto)

 - Adicionar o express que seria o manipulador principal do servidor
    -> yarn add express

 - Adicionar o typescript como dev
    -> yarn add typescript -D
    -> yarn tsc --init  (criar o arquivo tsconfig.json)
    * Neste json do TS definir o "rootDir": "./src", e o "outDir": "./dist"  (criar a pasta src no projeto, a dist será criada pelo manipulador do TS)

 - Instala o pacote que faz a conversão do TS pro JS e prepara o server para se manter rodando, faz o papel do Nodemon
    -> yarn add ts-node-dev -D
    * É necessário alterar o package.json definindo os scripts

- Ao clicar no Debug se atentar ao criar o arquivo de debug, é necessário alterar o scripts em package.json colocando o "--inspect" e configurar o launch.json de forma "attach" e protocol "inspect" com restart true (verificar arquivo)

- Instalando o pactote que cria os ID  de forma unica
    -> yarn add uuidv4

- Pacote com funções de tratamentos de data
    -> yarn add date-fns

- Principios de separação: models, repository e service
    * models -> Representação da entidade a ser manipulada (Appointment - Agendamentos)
    * repository -> vai cuidar da manipulação da entidade, procurar, criar, alterar...
    * services -> ações isoladas de regras de negocio, por exemplo CreateAppointmentService, serviço que só cria o agendamento, faz validações e chama a ação do repositorio.
    ** Resumindo os 'services' fazem a regra de negocio, validam, expoem erros e se utilizam do 'repositorio' e os 'repositorios' se utilizam dos 'models'.

- Instalando o Postgres no Docker:
    -> docker run --name database_postgres -e POSTGRES_PASSWORD=developer -p 5432:5432  -d postgres

- Instalando o TypeORM
    -> yarn add typeorm pg  (ou seja instala o ORM e o drive do Postgres)
    -> yarn add reflect-metadata

    * criar o arquivo ormconfig.json, usa-se dessa forma pois os comandos via terminal percisam deste arquivo
    * criano novo script no package.json referente ao TypeORM
    * executar o comando:
    -> yarn typeorm

    * para criar migrations executar:
    -> yarn typeorm migration:create -n CreateAppointments (esse comando cria a migration)

    * para executar as migrations ou seja atualziar o banco
    -> yarn typeorm migration:run

    * caso precise reverter a ultima migration
    -> yarn typeorm migration:revert

    * alterações necessárias no tsconfig.json
